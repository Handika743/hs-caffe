generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid()) @db.VarChar(255)
  name          String?    @db.VarChar(255)
  email         String?    @unique(map: "users_email_unique") @db.VarChar(255)
  password      String?    @db.VarChar(255)
  created_at    DateTime?  @db.Timestamp(0)
  updated_at    DateTime?  @db.Timestamp(0)
  no_handphone  String?    @db.VarChar(20)
  role          String?    @default("user") @db.VarChar(50)
  image         String?    @db.VarChar(255)
  emailVerified DateTime?  @map("email_verified")
  orders        Order[]
  accounts      Account[]
  keranjang     keranjang?
  sessions      Session[]

  @@map("users")
}

model keranjang {
  id             BigInt           @id @default(autoincrement())
  user_id        String           @unique
  created_at     DateTime?        @db.Timestamp(0)
  updated_at     DateTime?        @db.Timestamp(0)
  user           User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  keranjang_menu keranjang_menu[]
}

model keranjang_menu {
  id           BigInt    @id @default(autoincrement())
  keranjang_id BigInt
  menu_id      BigInt
  nama_menu    String    @db.VarChar(255)
  jumlah       Int       @default(1)
  jenis        String?   @db.VarChar(255)
  note         String?   @db.VarChar(255)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  keranjang    keranjang @relation(fields: [keranjang_id], references: [id], onDelete: Cascade)
  menu         menu      @relation(fields: [menu_id], references: [id], onDelete: Cascade)
}

model menu {
  id             BigInt           @id @default(autoincrement())
  nama_menu      String?          @db.VarChar
  jenis_menu     String?          @db.VarChar
  harga          Decimal?         @db.Decimal
  stock          BigInt?
  deskripsi      String?          @db.VarChar
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  image          String?
  image_display  String?
  order_items    OrderItem[]
  keranjang_menu keranjang_menu[]
}

model Order {
  id          BigInt      @id @default(autoincrement())
  user_id     String
  total_harga Decimal?
  status      String      @default("pending")
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  order_items OrderItem[]
}

model OrderItem {
  id        BigInt  @id @default(autoincrement())
  order_id  BigInt
  menu_id   BigInt
  nama_menu String
  jumlah    Int
  harga     Decimal
  note      String?
  menu      menu    @relation(fields: [menu_id], references: [id])
  order     Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
